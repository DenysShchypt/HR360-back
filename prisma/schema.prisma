// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String?
  email       String        @unique
  password    String?
  photo       String?
  verifyLink  String?
  tokens      Token[]       @relation("UserTokens")
  departments Departments[] @relation("UserDepartments")
  employees   Employee[]    @relation("UserEmployees")

  @@map("users")
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  exp       DateTime
  user      User     @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Departments {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String     @unique
  totalEmployee   Int
  headcountChange Int
  user            User       @relation("UserDepartments", fields: [userId], references: [id], onDelete: Cascade)
  userId          String     @db.ObjectId
  employees       Employee[] @relation("DepartmentEmployees")

  @@map("departments")
}

model Employee {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  photo        String
  role         String
  employment   String
  status       String
  checkIn      String
  checkOut     String
  overTime     String?
  department   Departments @relation("DepartmentEmployees", fields: [departmentId], references: [id])
  departmentId String      @db.ObjectId
  user         User        @relation("UserEmployees", fields: [userId], references: [id], onDelete: Cascade)
  userId       String      @db.ObjectId

  @@map("employees")
}
